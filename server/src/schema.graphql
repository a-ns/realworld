type User {
  email: String!
  username: String!
  token: String
  image: String
  bio: String
}

type Profile {
  username: String!
  bio: String
  image: String
  following: Boolean!
  email: String!
  articles(first: Int, after: String): ArticlesConnection
  comments(first: Int, after: String): CommentsConnection
  favorites(first: Int, after: String): ArticlesConnection
  # feed(first: Int, after: String): ArticlesConnection
}

type ArticlesConnection {
  count: Int!
  edges: [ArticleEdge]
  pageInfo: PageInfo!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
}

type ArticleEdge {
  node: Article
  cursor: String!
}

type Error {
  body: [String!]!
}

type Article {
  slug: String!
  title: String!
  description: String!
  body: String!
  tagList: [String!]!
  createdAt: String!
  updatedAt: String!
  favorited: Boolean!
  favoritesCount: Int!
  author: Profile!
  comments(first: Int, after: String): CommentsConnection
}

type Comment {
  id: Int!
  createdAt: String!
  updatedAt: String!
  body: String!
  author: Profile!
}

type CommentEdge {
  node: Comment
  cursor: String!
}

type CommentsConnection {
  count: Int!
  edges: [CommentEdge]
  pageInfo: PageInfo!
}

type ArticleResponse {
  article: Article
  errors: Error
}

type MeResponse {
  user: User
  errors: Error
}

type CommentResponse {
  comment: Comment
  errors: Error
}

type ProfileResponse {
  profile: Profile
  errors: Error
}

input ArticleUpdateInput {
  body: String
  description: String
  title: String
}

type Query {
  user: MeResponse!
  article(slug: String): Article
  articles(
    tag: String
    authoredBy: String
    favoritedBy: String
  ): ArticlesConnection
  feed(first: Int, after: String): ArticlesConnection
  profile(username: String!): ProfileResponse!
  tags: [String!]
  # No need for comments query, can just query the article and get the comments from it
}

type Mutation {
  login(email: String!, password: String!): MeResponse!
  register(email: String!, password: String!, username: String!): MeResponse!
  updateUser(email: String, bio: String, image: String): MeResponse!
  follow(username: String!): ProfileResponse!
  unfollow(username: String!): ProfileResponse!
  # Article
  createArticle(
    slug: String!
    title: String!
    description: String!
    body: String!
    tagList: [String!]
  ): ArticleResponse!
  updateArticle(slug: String, changes: ArticleUpdateInput!): ArticleResponse
  favoriteArticle(slug: String!): ArticleResponse
  deleteArticle(slug: String!): Boolean!

  # Comment
  addComment(slug: String!, body: String!): CommentResponse!
  deleteComment(id: Int!): Boolean!
}
